"""
Django settings for proj_cumulus project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from pathlib import Path #new in Python 3.4+
import json
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# This is to help distinguish where the server is running
ENV_TYPE = "prod"

# Read from env file
ENV_FILE_PATH = os.path.join(BASE_DIR, "env.json")

CONFIGS = None
if os.path.isfile(ENV_FILE_PATH):
    print("ENV FILE FOUND: WIll use this to config environment.")
    with open(ENV_FILE_PATH) as f:
        CONFIGS = json.loads(f.read())
        f.close()

    if not CONFIGS:
        raise ImproperlyConfigured("ImproperlyConfigured: Env.json is empty. Please follow env-template.json to setup an environment config file.")

    # Grab environment variables from env.json
    if "SECRET_KEY" in CONFIGS:
        SECRET_KEY = CONFIGS["SECRET_KEY"]
    else:
        raise ImproperlyConfigured("ImproperlyConfigured: No SECRET_KEY in env file.")

else:
    # In some environment, sensitive information will be in environment var directly.
    print("NO ENV FILE: Attempting to extract config from environment directly.")
    try:
        SECRET_KEY = os.environ['SECRET_KEY']
        AWS_ACCESS_KEY_ID = os.environ["AWS_ACCESS_KEY_ID"]
        AWS_SECRET_ACCESS_KEY = os.environ["AWS_SECRET_ACCESS_KEY"]
    except KeyError as err:
        print(repr(err))
        raise ImproperlyConfigured("ImproperlyConfigured environment variables.")





# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = [
    "localhost", 
    "playflipbook.herokuapp.com", 
    "playflipbook-dev.herokuapp.com"
]
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'easy_thumbnails',
    'rest_framework',
    'widget_tweaks',
    'storages',

    'graphene_django',
    
    'flipbooks',
    'frontend',
    'storypiper',
    'storypiper_view',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'proj_cumulus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                    os.path.join(BASE_DIR, 'proj_cumulus/templates'),
                ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

THUMBNAIL_ALIASES = {
    '': {
        'cell': {'size': (100, 0), 'crop': True},
        'thumb': {'size': (300, 0), 'crop': True}
    },
}

WSGI_APPLICATION = 'proj_cumulus.wsgi.application'

GRAPHENE = {
    'SCHEMA': 'proj_cumulus.schema.schema',
}


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static stuff. See local.py for dev setting

# STATIC_URL = '/static/'

# STATICFILES_DIRS = [ 
#     os.path.join(BASE_DIR, "static-storage"),
#     #'/var/www/static/'
# ]

# STATIC_ROOT = os.path.join(BASE_DIR, "static-serve")

# MEDIA_URL = "/media/"
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")