input CreateFlipbookInput {
  title: String
  description: String
  seriesId: Int
  clientMutationId: String
}

type CreateFlipbookPayload {
  flipbook: FlipbookNode
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteFlipbookInput {
  gid: ID!
  clientMutationId: String
}

type DeleteFlipbookPayload {
  response: String
  clientMutationId: String
}

type FlipbookNode implements Node {
  """The ID of the object."""
  id: ID!
  id64: String!
  title: String!
  description: String!
  series: SeriesNode
  dateCreated: DateTime!
  dateModified: DateTime!
  pk: Int
}

type FlipbookNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [FlipbookNodeEdge]!
}

"""A Relay edge containing a `FlipbookNode` and its cursor."""
type FlipbookNodeEdge {
  """The item at the end of the edge"""
  node: FlipbookNode

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createFlipbook(input: CreateFlipbookInput!): CreateFlipbookPayload
  updateFlipbook(input: UpdateFlipbookInput!): UpdateFlipbookPayload
  deleteFlipbook(input: DeleteFlipbookInput!): DeleteFlipbookPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """The ID of the object"""
  flipbook(id: ID!): FlipbookNode
  allFlipbooks(before: String, after: String, first: Int, last: Int, id64: String, title: String, title_Icontains: String, title_Istartswith: String, description: String, description_Icontains: String, series_Title: String, series_Title_Icontains: String): FlipbookNodeConnection

  """The ID of the object"""
  series(id: ID!): SeriesNode
  allSeriess(before: String, after: String, first: Int, last: Int, title: String): SeriesNodeConnection
}

type SeriesNode implements Node {
  """The ID of the object."""
  id: ID!
  title: String!
  slug: String!
  isDemo: Boolean!
  dateCreated: DateTime!
  dateModified: DateTime!
  flipbookSet(before: String, after: String, first: Int, last: Int, id64: String, title: String, title_Icontains: String, title_Istartswith: String, description: String, description_Icontains: String, series_Title: String, series_Title_Icontains: String): FlipbookNodeConnection!
  pk: Int
}

type SeriesNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SeriesNodeEdge]!
}

"""A Relay edge containing a `SeriesNode` and its cursor."""
type SeriesNodeEdge {
  """The item at the end of the edge"""
  node: SeriesNode

  """A cursor for use in pagination"""
  cursor: String!
}

input UpdateFlipbookInput {
  pk: Int!
  title: String
  description: String
  clientMutationId: String
}

type UpdateFlipbookPayload {
  flipbook: FlipbookNode
  clientMutationId: String
}

